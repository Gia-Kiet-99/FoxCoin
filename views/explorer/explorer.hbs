<div class="container-lg">
  <nav class="navbar fixed-top navbar-expand-lg navbar-light" style="background-color: rgb(18, 29, 51);">
    <div class="container p-0">
      <a class="navbar-brand" href="/wallet">
        <img src="/images/fox_icon.png" class="rounded-circle" width="40" height="40" alt="foxicon">
        &nbsp;&nbsp;<strong class="text-white">FOX</strong>
      </a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse d-flex" id="navbarNav">
        <ul class="navbar-nav d-flex justify-content-center" style="flex: 1">
          <li class="nav-item mx-2">
            <a class="nav-link px-1" href="/wallet">
              <h6 style="font-size: 1em; color: #999"><strong>Wallet</strong></h6> <span
                class="sr-only">(current)</span>
            </a>
          </li>
          <li class="nav-item mx-2">
            <a class="nav-link pb-0 px-1" href="/explorer"
              style="border-bottom: 2px solid #8c7ae6; border-radius: 5px;">
              <h6 style="color: #eee; font-size: 1em;"><strong>Explorer</strong></h6>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <main style="padding-top: 120px; max-height: 100vh;">
    <div class="row d-flex small-text">
      <div class="d-flex px-4 py-3 rounded-lg info shadow-sm align-items-center"
        style="color: #eee; background-color: #8c7ae6;">
        <i class="fas fa-coins" style="font-size: 32px;"></i>
        <div class="ml-4 text-nowrap text-truncate">
          <div>Mined Coin</div>
          <div><span id="mined-coin">{{minedCoin}}</span> FXC</div>
        </div>
      </div>

      <div class="d-flex px-4 py-3 ml-3 rounded-lg info shadow-sm align-items-center"
        style="color: #eee;background-color: #6c5ce7;">
        <img src="images/pickaxe.png" alt="difficulty.png" width="32" height="32">
        <div class="ml-4">
          <div>Current Difficulty</div>
          <div id="curr-difficulty">{{currentDifficulty}}</div>
        </div>
      </div>

      <div class="d-flex px-4 py-3 ml-3 rounded-lg info shadow-sm align-items-center"
        style="color: #eee;background-color: #6c5ce7;">
        <img src="images/transaction.png" alt="transaction.png" width="32" height="32">
        <div class="ml-4">
          <div>Number of Transactions</div>
          <div id="num-of-transation">{{numOfTransaction}}</div>
        </div>
      </div>
    </div>

    <div class="row mt-3">
      <div class="col-sm-6 rounded-lg p-0">
        <div class="card shadow-sm mr-2" style="border: .5px solid rgb(236, 236, 236);">
          <div class="card-header" style="background-color: transparent;">
            <div style="margin-bottom: 0;"><strong>Latest blocks</strong></div>
            <small>The most recently mined blocks</small>
          </div>
          <div class="card-body">
            <table class="table table-borderless small-text" id="block-table">
              <thead>
                <tr>
                  <th scope="col" style="font-size: 14px;">Height</th>
                  <th scope="col" style="font-size: 14px;">Mined</th>
                  <th scope="col" style="font-size: 14px;">Miner</th>
                  <th scope="col" style="font-size: 14px;">Size (Byte)</th>
                </tr>
              </thead>
              <tbody id="block-rows">
                {{#each blockchain}}
                <tr>
                  <td scope="row">
                    <a href="/explorer/block/{{this.index}}">{{this.index}}</a>
                  </td>
                  <td>{{this.timestamp}}</td>
                  <td>
                    <a href="/explorer/address/{{this.miner}}">{{this.miner}}</a>
                  </td>
                  <td>{{this.size}}</td>
                </tr>
                {{/each}}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div class="col-sm-6 rounded-lg p-0">
        <div class="card shadow-sm ml-2" style="border: .5px solid rgb(236, 236, 236);">
          <div class="card-header" style="background-color: transparent;">
            <div style="margin-bottom: 0;"><strong>Latest Transactions</strong></div>
            <small>The most recently published unconfirmed transactions</small>
          </div>
          <div class="card-body">
            <table class="table table-borderless small-text" id="transaction-table">
              <thead>
                <tr>
                  <th scope="col" style="font-size: 14px;">Hash</th>
                  <th scope="col" style="font-size: 14px;">Receiver</th>
                  <th scope="col" style="font-size: 14px;">Amount (FXC)</th>
                </tr>
              </thead>
              <tbody id="transaction-rows">
                {{#each transactionPool}}
                <tr>
                  <td>
                    <a class="transaction-id" href="/explorer/transaction/{{this.id}}">{{this.id}}</a>
                  </td>
                  <td>
                    <a href="/explorer/address/{{this.receiver}}">{{this.receiver}}</a>
                  </td>
                  <td>{{this.amount}}</td>
                </tr>
                {{/each}}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </main>

</div>

<script>
  const P2P_PORT = 3001;
  const MessageType = {
    QUERY_LATEST: 0,
    QUERY_ALL: 1,
    RESPONSE_BLOCKCHAIN: 2,
    QUERY_TRANSACTION_POOL: 3,
    RESPONSE_TRANSACTION_POOL: 4
  }

  let blockTable;
  let transactionTable;

  $(document).ready(function () {
    blockTable = $('#block-table').DataTable({
      searching: false,
      ordering: false,
      bLengthChange: false,
      bInfo: false
    });
    transactionTable = $('#transaction-table').DataTable({
      searching: false,
      ordering: false,
      bLengthChange: false,
      bInfo: false
    });
  })

  function setupWS() {
    const ws = new WebSocket(`ws://localhost:${P2P_PORT}`);
    ws.onopen = function () {
      console.log('Onopen');
    }
    ws.onmessage = function (event) {
      const message = JSON.parse(event.data);
      const data = JSON.parse(message.data);
      switch (message.type) {
        case MessageType.RESPONSE_BLOCKCHAIN:
          updateBlockChain(data);
          break;
        case MessageType.RESPONSE_TRANSACTION_POOL:
          let rows = [];
          for (const tx of data) {
            rows.unshift(`<tr>
                      <td scope="row">
                        <a class="transaction-id" 
                          href="/explorer/transaction/${tx.id}">${tx.id}</a>
                      </td>
                      <td>
                        <a href="/explorer/address/${tx.txOuts[0].address}">${tx.txOuts[0].address}</a>
                      </td>
                      <td>${tx.txOuts[0].amount}</td>
                    </tr>`);
          }
          transactionTable.destroy();
          $('#transaction-rows').html(rows.join());
          transactionTable = $('#transaction-table').DataTable({
            searching: false,
            ordering: false,
            bLengthChange: false,
            bInfo: false
          });
          break;
        default:
          break;
      }
      console.log("Received message: " + event.data);
    }
  }
  setupWS();

  function updateTxPoolAfterMine(minedTransactions) {
    const minedTransactionIds = minedTransactions.map(trans => trans.id);
    const txPoolElements = document.getElementsByClassName('transaction-id');
    const removableElements = [];

    for (let i = 0; i < txPoolElements.length; i++) {
      if (minedTransactionIds.find(id => id === txPoolElements[i].innerHTML)) {
        removableElements.push(txPoolElements[i].parentNode.parentNode);
      }
    }
    removableElements.forEach(e => e.remove());
  }

  function updateBlockChain(blockchain) {
    if (blockchain.length === 1) {
      let row = `<tr>
                  <td scope="row">
                    <a href="/explorer/block/${blockchain[0].index}">${blockchain[0].index}</a>
                  </td>
                  <td>${moment(blockchain[0].timestamp * 1000).fromNow()}</td>
                  <td>
                    <a href="/explorer/address/${blockchain[0].data[0].txOuts[0].address}">${blockchain[0].data[0].txOuts[0].address}</a>
                  </td>
                  <td>${JSON.stringify(blockchain[0]).length}</td>
                </tr>`;
      blockTable.destroy();
      $('#block-rows').prepend(row);
      blockTable = $('#block-table').DataTable({
        searching: false,
        ordering: false,
        bLengthChange: false,
        bInfo: false
      });
      updateTxPoolAfterMine(blockchain[0].data);
    } else if (blockchain.length > 1) {
      let row = "";
      for (const block of blockchain) {
        row = `<tr>
                  <th scope="row">${block.index}
                    <a href="/explorer/block/${block.index}">${block.index}</a>
                  </th>
                  <td>${block.timestamp}</td>
                  <td>
                    <a href="/explorer/address/${block.data[0].txOuts[0].address}">${block.data[0].txOuts[0].address}</a>
                  </td>
                  <td>${JSON.stringify(block).length}</td>
                </tr>`;
        $('#block-rows').prepend(row);
      }
    }
  }


</script>