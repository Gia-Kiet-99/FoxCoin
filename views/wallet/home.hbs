<div class="container-fluid">
  <header>
    <nav class="navbar fixed-top navbar-light bg-white">
      <a class="navbar-brand d-flex align-items-center" href="/wallet">
        <img src="/images/fox.png" class="rounded-circle" width="40" height="40" alt="foxicon">
        &nbsp;&nbsp;<strong style="color: #b64900;">FoxWallet</strong>
      </a>
      <a href="/users/signout" class="text-left sidebar-button d-flex align-items-center mx-3" role="button">
        <i class="fas fa-sign-out-alt" style="font-size: 24px;"></i>
        &nbsp;&nbsp;<strong>Sign out</strong>
      </a>
    </nav>
  </header>

  <main>
    <div class="row" style="height: 100vh;">
      <div class="col-sm-2 p-0">
        <nav class="navbar p-0" style="margin-top: 85px;">
          <ul style="list-style-type: none;width: 100%;margin: 0;padding: 0;">
            <li>
              <a href="/wallet" class="text-left sidebar-button active-side-bar p-3 pl-4">
                <i class="fa fa-home" style="font-size: 24px;" aria-hidden="true"></i>
                &nbsp;&nbsp;<strong>Wallet</strong>
              </a>
            </li>
            <li>
              <a href="/explorer" class="text-left sidebar-button p-3 pl-4" role="button">
                <i class="fab fa-wpexplorer" style="font-size: 24px;"></i>
                &nbsp;&nbsp;<strong>Explorer</strong>
              </a>
            </li>
          </ul>
        </nav>
      </div>

      <div class="col-sm-10 bg-light">
        <div class="row d-flex" style="margin-top: 75px; margin-left: 75px; margin-right: 75px;">
          <div class="d-flex p-4 mx-5 my-3 rounded-lg info" style="color: #eee; background-color: #8c7ae6;">
            <i class="far fa-id-badge" style="font-size: 48px;"></i>
            <div class="ml-4">
              <h5>Address</h5>
              <p style="max-width: 100%;">{{address}}</p>
            </div>
          </div>
          <div class="d-flex p-4 mr-5 my-3 rounded-lg info" style="color: #eee;background-color: #6c5ce7;">
            <i class="fas fa-wallet" style="font-size: 48px;"></i>
            <div class="ml-4">
              <h5>Balance</h5>
              <p><strong id="balance" style="font-size: larger;">{{balance}}</strong> Fox</p>
            </div>
          </div>
        </div>

        <div class="row" style="margin: 20px 125px; height: 100px;">
          <div class="col-sm-12 rounded-lg bg-white p-0">
            <div class="card" style="border: none; border-left: 3px solid #8c7ae6;">
              <div class="card-header bg-white border-0">
                <h4><strong style="color: #555">Send Transaction</strong></h4>
              </div>
              <div class="card-body">
                <div class="form-row mx-4 mb-4">
                  <div class="form-group col-md-4">
                    <label for="amount"><strong style="color: #555;">Amount</strong></label>
                    <input type="number" name="amount" class="form-control" id="amount" min="0" placeholder="Amount"
                      onchange="validateAmount('{{address}}', this.value)" aria-describedby="amountHelp">
                    <small id="amountHelp" class="form-text text-muted"></small>
                  </div>
                  <div class="form-group col-md-8">
                    <label for="address"><strong style="color: #555;">Address</strong></label>
                    <input type="text" name="address" class="form-control" id="address" placeholder="Address"
                      aria-describedby="addressHelp" onchange="validateAddress('{{address}}', this.value)">
                    <small id="addressHelp" class="form-text text-muted"></small>
                  </div>
                  <button class="btn mt-1" onclick="sendTransaction('{{address}}', {{balance}})"
                    style="background-color: #6c5ce7; color: #eee">
                    <strong>SEND</strong>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row" style="margin: 200px 125px;">
          <div class="col-sm-12 rounded-lg bg-white p-0">
            <div class="card" style="border: none; border-left: 3px solid #8c7ae6;">
              <div class="card-header bg-white border-0" style="background-color: pink;">
                <h4><strong style="color: #555;">Transaction pool</strong></h4>
              </div>
              <div class="card-body">
                <div class="mx-4 mb-4">
                  <table class="table table-borderless">
                    <thead>
                      <tr>
                        <th scope="col">Hash</th>
                        <th scope="col">Receiver</th>
                        <th scope="col">Amount (FXC)</th>
                      </tr>
                    </thead>
                    <tbody id="table-rows">
                      {{#each transactionPool}}
                      <tr>
                        <th class="transaction-id" scope="row">{{this.id}}</th>
                        <td>{{this.receiver}}</td>
                        <td>{{this.amount}}</td>
                      </tr>
                      {{/each}}
                    </tbody>
                  </table>
                  <button id="mine-button" class="btn mt-1" onclick="mineBlock('{{address}}')"
                    style="background-color: #6c5ce7; color: #eee">
                    <strong>MINE BLOCKS</strong>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
    </div>
  </main>
</div>

<script>
  const PORT = 3000;

  const MessageType = {
    QUERY_LATEST: 0,
    QUERY_ALL: 1,
    RESPONSE_BLOCKCHAIN: 2,
    QUERY_TRANSACTION_POOL: 3,
    RESPONSE_TRANSACTION_POOL: 4
  }

  function setupWS() {
    const ws = new WebSocket('ws://localhost:45678');
    ws.onopen = function () {
      console.log('Onopen');
    }
    ws.onmessage = function (event) {
      const message = JSON.parse(event.data);
      const data = JSON.parse(message.data);
      switch (message.type) {
        case MessageType.RESPONSE_BLOCKCHAIN:
          break;
        case MessageType.RESPONSE_TRANSACTION_POOL:
          let rows = '';
          for (const tx of data) {
            rows += `<tr>
                      <th class="transaction-id" scope="row">${tx.id}</th>
                      <td>${tx.txOuts[0].address}</td>
                      <td>${tx.txOuts[0].amount}</td>
                    </tr>`
          }
          $('#table-rows').html(rows);
          break;
        default:
          break;
      }
      console.log("Received message: " + event.data);
    }
  }
  setupWS();

  function validateAddress(myAddress, address) {
    if (myAddress === address) {
      $('#addressHelp').text("We don't do that here");
      return false;
    } else {
      const ret = /[0-9a-f]{130}/.test(address);
      if (ret === false) {
        $('#addressHelp').text('Address is 130 characters long and is in hex format');
      } else {
        $('#addressHelp').text('');
      }
      return ret;
    }
  }

  function validateAmount(myAddress, amount) {
    if (amount && amount > 0) {
      $.ajax({
        url: `http://localhost:${PORT}/api/wallet/${myAddress}`,
        type: 'GET'
      }).done(data => {
        console.log(data);
        if (data.balance < amount) {
          $('#amountHelp').text("You're too poor to send money to others");
          return false;
        }
        $('#amountHelp').text("");
        return true;
      }).fail(error => {
        $('#amountHelp').text("Server error");
        return false;
      })
    } else {
      $('#amountHelp').text("Enter valid amount");
    }
  }

  function sendTransaction(myAddress, balance) {
    const receivedAddress = $('#address').val();
    const amount = parseInt($('#amount').val());

    if (validateAddress(myAddress, receivedAddress) && balance >= amount) {
      //send transaction
      const jsonToPost = JSON.stringify({
        myAddress: myAddress,
        receivedAddress: receivedAddress,
        amount: amount
      });
      $.ajax({
        url: `http://localhost:${PORT}/api/wallet/send`,
        type: 'POST',
        dataType: 'json',
        data: jsonToPost,
        contentType: 'application/json'
      }).done(data => {
        console.log(data);
        Swal.fire({
          icon: 'success',
          title: "Your transaction has been sent",
          showConfirmButton: false,
          timer: 1500
        });
      }).fail(error => {
        console.log(error);
        Swal.fire({
          icon: 'error',
          title: "Oops.. Something went wrong",
          showConfirmButton: false,
          timer: 1500
        });
      })
    }
  }

  function bottomAlert(icon, text) {
    const Toast = Swal.mixin({
      toast: true,
      position: 'bottom-start',
      showConfirmButton: false,
      timer: 3000,
      timerProgressBar: false,
      didOpen: (toast) => {
        toast.addEventListener('mouseenter', Swal.stopTimer)
        toast.addEventListener('mouseleave', Swal.resumeTimer)
      }
    })
    Toast.fire({
      icon: icon,
      title: text
    })
  }

  function mineBlock(myAddress) {
    if ($('#table-rows').html().trim()) {
      $('#mine-button').html('<span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>&nbsp;&nbsp;Mining...')

      $.ajax({
        url: `http://localhost:${PORT}/api/blocks/mineBlock`,
        type: 'POST',
        dataType: 'json',
        data: JSON.stringify({ myAddress: myAddress }),
        contentType: 'application/json'
      }).done(data => {
        console.log(data);
        Swal.fire({
          icon: 'success',
          title: "Congratulation! You've mined a block and got 50 coin",
          showConfirmButton: false,
          timer: 1500
        });

        $('#balance').text(data.balance);
        $('#mine-button').html('<strong>MINE BLOCKS</strong>');

        console.log("Update transaction pool after mined");
        updateTxPoolAfterMine(data.newBlock.data);
      }).fail(error => {
        console.log(error);
        $('#mine-button').html('<strong>MINE BLOCKS</strong>');
        bottomAlert('warning', 'Transaction pool is empty')
      })
    } else {
      bottomAlert('warning', 'Transaction pool is empty')
    }
  }

  function updateTxPoolAfterMine(minedTransactions) {
    const minedTransactionIds = minedTransactions.map(trans => trans.id);
    const txPoolElements = document.getElementsByClassName('transaction-id');
    const removableElements = [];

    for (let i = 0; i < txPoolElements.length; i++) {
      if (minedTransactionIds.find(id => id === txPoolElements[i].innerHTML)) {
        removableElements.push(txPoolElements[i].parentNode);
      }
    }
    removableElements.forEach(e => e.remove());
  }


</script>